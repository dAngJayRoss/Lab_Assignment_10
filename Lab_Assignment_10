#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define NUM_LETTERS 26

struct Trie 
{
    struct Trie *children[NUM_LETTERS];
    int count;
};

void insert(struct Trie **ppTrie, char *word);
int numberOfOccurrences(struct Trie *pTrie, char *word);
struct Trie *deallocateTrie(struct Trie *pTrie);

void insert(struct Trie **ppTrie, char *word) 
{
    struct Trie *current = *ppTrie;
  
    if (current == NULL) 
    {
        current = (struct Trie*) malloc(sizeof(struct Trie));
      
        for (int i = 0; i < NUM_LETTERS; i++) 
        {
            current->children[i] = NULL;
        }
        current->count = 0;
        *ppTrie = current;
    }
  
    for (int i = 0; i < strlen(word); i++) 
    {
        char c = tolower(word[i]);
        if (current->children[c - 'a'] == NULL) 
        {
            current->children[c - 'a'] = (struct Trie*) malloc(sizeof(struct Trie));
          
            for (int j = 0; j < NUM_LETTERS; j++) 
            {
                current->children[c - 'a']->children[j] = NULL;
            }
          
            current->children[c - 'a']->count = 0;
        }
      
        current = current->children[c - 'a'];
    }
    current->count++;
}

int numberOfOccurrences(struct Trie *pTrie, char *word) 
{
    struct Trie *current = pTrie;
    for (int i = 0; i < strlen(word); i++) 
    {
        char c = tolower(word[i]);
        if (current->children[c - 'a'] == NULL) 
        {
            return 0;
        }
      
        current = current->children[c - 'a'];
    }
  
    return current->count;
}

struct Trie *deallocateTrie(struct Trie *pTrie) 
{
    if (pTrie == NULL) 
    {
        return NULL;
    }
  
    for (int i = 0; i < NUM_LETTERS; i++) 
    {
        pTrie->children[i] = deallocateTrie(pTrie->children[i]);
    }
  
    free(pTrie);
    return NULL;
}

int main(void) 
{
    struct Trie *trie = NULL;

    // read the number of words in the dictionary
    int numWords;
    scanf("%d", &numWords);
    getchar(); // consume the newline character after the number
    for (int i = 0; i < numWords; i++) 
    {
        char word[100];
        fgets(word, 100, stdin);
        word[strcspn(word, "\n")] = 0; // remove the newline character from the word
        insert(&trie, word);
    }

    char *pWords[] = {"notaword", "ucf", "no", "note", "corg"};
  
    for (int i = 0; i < 5; i++) 
    {
        printf("\t%s : %d\n", pWords[i], numberOfOccurrences(trie, pWords[i]));
    }

    trie = deallocateTrie(trie);
  
    if (trie != NULL) 
    {
        printf("There is an error in this program\n");
    }

    return 0;
}
